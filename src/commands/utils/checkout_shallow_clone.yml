parameters:
  github_username:
    description: username for cloning git repositories
    type: env_var_name
    default: GITHUB_USERNAME
  github_token:
    description: token for cloning git repositories
    type: env_var_name
    default: GITHUB_TOKEN
  github_branch:
    description: git branch for the repo provided
    type: env_var_name
    default: CIRCLE_BRANCH
  github_tag:
    description: git tag for the repo provided
    type: env_var_name
    default: CIRCLE_TAG
  github_repo_name:
    description: github repo name
    type: env_var_name
    default: CIRCLE_PROJECT_REPONAME
  path_to_clone:
    description: Path to clone the github repo
    type: string
    default: '.'
  step_name:
    description: Name of the step
    type: string
    default: Checkout Code with shallow clone
  run_in_background:
    description: run the command in background
    type: boolean
    default: false
steps:
  - run:
      name: << parameters.step_name >>
      background: << parameters.run_in_background >>
      # The first command is a shallow clone of the repo where we use depth = 1
      # https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/
      # -b flag is used to specify the branch to clone
      # In circleci we checkout code either from branches or tags, so we use the branch if it exists, otherwise the tag
      # In git both a branch and a tag are treated as a branch, so we take advantage of this to have one command for both
      # The circleci environment variable for current branch is CIRCLE_BRANCH, and for current tag is CIRCLE_TAG
      # There will always be one of them set at any given time and the other one will be empty
      # These have been defined as parameters to allow for easy customization
      # We use bash conditionals to check if the branch is set, otherwise use the tag environment variable.If both are not set then fail
      # The second command checks out the previous 2 commits of master.
      # Its not enough to shallow clone the most recent commit of your PR branch or tag, some tools we use for UI tests need master branch  (HEAD) and master -1 (HEAD^) to do certain comparisons
      # For repositories we can use shallow cloning, the 2 git commands below allow us to fetch the least amount of code that allows the pipeline to pass
      # Other considerations and exceptions can be found here https://www.notion.so/voiceflow/Shallow-clone-across-all-repos-9e4f6402bcbe4f3f925f583c61c0ec82
      command: |
        git clone --depth=1 -b ${<< parameters.github_branch >>:-${<< parameters.github_tag >>:?}} https://${<< parameters.github_username >>}:${<< parameters.github_token >>}@github.com/voiceflow/${<< parameters.github_repo_name >>} << parameters.path_to_clone >>
        git fetch origin master --depth=2
