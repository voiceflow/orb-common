parameters:
  commit_message:
    description: Commit message to check
    type: string
  match_env_var:
    description: Environment variable to set with the result of the match
    type: env_var_name
    default: "COMMIT_MESSAGE_MATCH"
  should_halt:
    description: Whether to halt the job if the commit message does not match
    type: boolean
    default: true
steps:
  - when:
      condition: << parameters.should_halt >>
      steps:
        - run:
            name: Check commit message
            environment:
              CHECK_COMMIT_MESSAGE: '<< parameters.commit_message >>'
            command: |
              # If a message has been introduced, we have to check that in the commit message, if it is not included, the braches will not be synced
              # this is for the use case of the bugfix mechanism
              COMMIT_MESSAGE="$(git log --format=oneline -n 1 $CIRCLE_SHA1)"

              # If CHECK_COMMIT_MESSAGE is empty, this is always false
              if [[ $COMMIT_MESSAGE != *"$CHECK_COMMIT_MESSAGE"* ]]; then
                circleci-agent step halt
              fi
  - unless:
      condition: << parameters.should_halt >>
      steps:
        - run:
          name: Check commit message and set env var
          environment:
            CHECK_COMMIT_MESSAGE: '<< parameters.commit_message >>'
          command: |
            # If a message has been introduced, we have to check that in the commit message, if it is not included, the braches will not be synced
            # this is for the use case of the bugfix mechanism
            COMMIT_MESSAGE="$(git log --format=oneline -n 1 $CIRCLE_SHA1)"

            # If CHECK_COMMIT_MESSAGE is empty, this is always false
            MATCH="false"
            if [[ $COMMIT_MESSAGE == *"$CHECK_COMMIT_MESSAGE"* ]]; then
                MATCH="true"
            fi

            echo "export << parameters.match_env_var >>=\"$MATCH\"" >> "$BASH_ENV"
