parameters:
  base_revision:
    description: Git revision to compare against
    type: string
    default: master
  git_branch:
    description: Current git branch
    type: string
    default: master
  target_env_var:
    description: Environment variable to set with the list of changed files
    type: env_var_name
    default: COMPUTED_BASE_REVISION
steps:
  - run:
      name: Put computed base revision in << parameters.target_env_var >> environment variable
      environment:
        BASE_REVISION: '<< parameters.base_revision >>'
        GIT_BRANCH: '<< parameters.git_branch >>'
      command: |
        # For all branches that are created, eg for review envs, normal PR's,branch rebases,bors trying/staging and renovate builds, use master as the base revision; except for production
        BASE="master"
        # Master branch has multiple PR's merged into it independently before the `branch-sync` to production occurs.
        # After sync, the 2 branches are a mirror of each other because the current SHA for production is similar to the SHA for master branch
        # In the case where the SHA's are the same, we then do a diff between HEAD and HEAD~1, which discards all other changes
        # Using latest master as base revision for production would cause us to skip detecting all other changes except HEAD~1 up to HEAD, for monorepos
        # The fix is to use the base revision as the commit of the previous circleci build on production branch, ensuring that all changes are detected
        # Circleci exposes the last build's commit as an environment variable `pipeline.git.base_revision` which is paased to this command as `base_revision` parameter
        if [[ $GIT_BRANCH == "production" ]] ; then
          BASE="$BASE_REVISION"
        fi
        echo "COMPUTED_BASE_REVISION environment variable to set to $BASE"
        echo "export << parameters.target_env_var >>=\"$BASE\"" >> "$BASH_ENV"
