parameters:
  image_repo:
    description: The container image repository
    type: string
  image_tag:
    description: The container image tag
    type: string
    default: ""
  sem_ver_override:
    description: Semantic release version of the package
    type: string
    default: ""
  dockerfile:
    description: Name of the Dockerfile to build
    type: string
    default: Dockerfile
  build_context:
    description: Path to the context for the docker build
    type: string
    default: '.'
  checkout:
    description: Determines if a checkout will be executed or not
    type: boolean
    default: true
  request_remote_docker:
    description: Add the option to request a new remote docker, set to false when you concat docker jobs
    type: boolean
    default: true
  monorepo_directory:
    description: the root directory of monorepo, uses a local registry to pre-release package versions
    type: string
    default: ""
  package:
    description: The monorepo package that has been changed
    type: string
    default: ""
  package_folder:
    description: The monorepo package that has been changed
    type: string
    default: "packages"
  force_execute:
    description: force to notify, if there is a change or not.
    type: boolean
    default: false
  kms_key:
    description: KMS Key to sign the containers
    type: string
    default: "awskms:///2e64fa98-d1b0-491a-acf6-1f5fc6f94ecf"
steps:
  - when:
      condition: << parameters.checkout >>
      steps:
        - checkout # special step to check out source code to working directory
  - when:
      condition:
        and:
          - equal: [false, << parameters.force_execute >>]
          - not:
              equal: ["", << parameters.package >>]
      steps:
        - stop_if_no_changes:
            package: << parameters.package >>
            package_folder: << parameters.package_folder >>
  - when:
      condition: << parameters.request_remote_docker >>
      steps:
        - setup_remote_docker:  # Need this to run DinD
            version: 20.10.11
  - attach_workspace:
      at: ~/voiceflow
  - docker_login
  - when:
      condition: << parameters.monorepo_directory >>
      steps:
        - setup_local_registry:
            verdaccio_config: << parameters.monorepo_directory >>/config/verdaccio/config.yaml
        - monorepo_publish_to_local_registry:
            working_directory: << parameters.monorepo_directory >>
  - run:
      name: "Build docker image"
      command: |
        SEM_VER_OVERRIDE="<< parameters.sem_ver_override >>"
        IMAGE_TAG_OVERRIDE="<< parameters.image_tag >>"
        if [[ "$IMAGE_TAG_OVERRIDE" == "" ]]; then
          IMAGE_TAG="k8s-$CIRCLE_SHA1"
        else
          IMAGE_TAG="$IMAGE_TAG_OVERRIDE"
        fi
        IMAGE_REPO="<< parameters.image_repo >>"
        IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
        PACKAGE="<< parameters.package >>"
        BUILD_CONTEXT="<< parameters.build_context >>"

        # Semantic release from the current tags
        if [[ "$CIRCLE_BRANCH" == "master" || "$CIRCLE_BRANCH" == "production" ]]; then
            # Update the new tags
            git fetch --tags
            SEM_VER=$(git describe --abbrev=0 --tags)
          if [[ ! -z "$PACKAGE" ]]; then
            SEM_VER=$(git describe --abbrev=0 --tags --match "@voiceflow/$PACKAGE@*")
            SEM_VER=$(echo ${SEM_VER##*@})
          fi
        else
          SEM_VER=$CIRCLE_BRANCH-$CIRCLE_SHA1
        fi

        if [[ "$SEM_VER_OVERRIDE" != "" ]]; then
          SEM_VER=$SEM_VER_OVERRIDE
        fi

        if [[ ! -f "$BUILD_CONTEXT/yarn.lock" && -f "yarn.lock" ]]; then
            echo "Copying yarn.lock file from root"
            cp yarn.lock $BUILD_CONTEXT/yarn.lock
        fi

        echo -e "Building with SEM_VER=$SEM_VER"

        docker build \
          <<# parameters.monorepo_directory >> \
            --network host \
            --build-arg build_REGISTRY_URL=http://localhost:4873 \
          <</ parameters.monorepo_directory >> \
          <<^ parameters.monorepo_directory >> \
            --build-arg NPM_TOKEN=//registry.npmjs.org/:_authToken=${NPM_TOKEN} \
          <</ parameters.monorepo_directory >> \
          <<# parameters.package >> \
            --build-arg APP_NAME=$PACKAGE \
          <</ parameters.package >> \
          --build-arg build_BUILD_NUM=${CIRCLE_BUILD_NUM} \
          --build-arg build_BUILD_URL=${CIRCLE_BUILD_URL}	\
          --build-arg build_GITHUB_TOKEN=${GITHUB_TOKEN} \
          --build-arg build_GIT_SHA=${CIRCLE_SHA1} \
          --build-arg build_SEM_VER=${SEM_VER} \
          -f $BUILD_CONTEXT/<< parameters.dockerfile >> \
          -t $IMAGE_NAME $BUILD_CONTEXT
  - run:
      name: "Push docker images"
      command: |
        IMAGE_TAG_OVERRIDE="<< parameters.image_tag >>"
        KMS_KEY="<< parameters.kms_key >>"
        if [[ "$IMAGE_TAG_OVERRIDE" == "" ]]; then
          IMAGE_TAG="k8s-$CIRCLE_SHA1"
        else
          IMAGE_TAG="$IMAGE_TAG_OVERRIDE"
        fi
        IMAGE_REPO="<< parameters.image_repo >>"
        IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
        docker push $IMAGE_NAME

        # Signing Docker Image
        cosign sign --key $KMS_KEY $IMAGE_NAME

        # if a tag is set, do not push to latest-$BRANCH_NAME
        if [[ "$IMAGE_TAG_OVERRIDE" == "" ]]; then
          BRANCH_NAME=$(echo $CIRCLE_BRANCH | sed 's/[^a-zA-Z0-9]/-/g')
          if [[ -z "$CIRCLE_BRANCH" && ! -z "$CIRCLE_TAG" ]]; then
            BRANCH_NAME="master"
          fi
          docker tag $IMAGE_NAME $IMAGE_REPO:latest-$BRANCH_NAME
          docker push $IMAGE_REPO:latest-$BRANCH_NAME

          # Signing Docker Image
          cosign sign --key $KMS_KEY $IMAGE_REPO:latest-$BRANCH_NAME

          # To not to have untagged images
          docker tag $IMAGE_NAME $IMAGE_REPO:k8s-$BRANCH_NAME-$CIRCLE_SHA1
          docker push $IMAGE_REPO:k8s-$BRANCH_NAME-$CIRCLE_SHA1
          cosign sign --key $KMS_KEY $IMAGE_REPO:k8s-$BRANCH_NAME-$CIRCLE_SHA1
        fi
