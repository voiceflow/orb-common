description: Uses vfcli to delete an environment

parameters:
  env-name:
    type: string
    description: Name of the environment to create
  when:
    type: string
    description: When to run this command
    default: always
  force:
    type: boolean
    description: Whether to delete the environment forcefully
    default: false
  env-name-path:
    type: string
    description: Path to the env_name file
    default: "/home/circleci/voiceflow/env_name.txt"
  reset-db:
    type: boolean
    description: Whether to reset the database
    default: false
steps:
  - restore_cache:
      key: env_name_cache-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
  - run:
      name: Release or Delete Env
      when: << parameters.when >>
      command: |
        if [[ $force == true ]]; then
          vfcli env delete --name "<< parameters.env-name >>" --interactive false --force
        else
          if [[ -f << parameters.env-name-path >> ]]; then
            env_name=$(cat << parameters.env-name-path >>)
            echo "Env: $env_name will be released"
          else
            env_name="null"
            echo "Env name file was not found. Will proceed to deleting the environment."
          fi
          if [[ "$env_name" != "null" ]] && [[ -n "$env_name" ]]; then
            echo "Releasing the environment..... $env_name"
            vfcli pool release-env --env-name "$env_name"
            if [[ << parameters.reset-db >> == true ]]; then
              echo "Resetting the database for $env_name"
              vfcli pool release-env --env-name "$env_name"
              echo "Triggering pipeline with env-name parameter"
              response=$(curl -s -o /dev/null -w "%{http_code}" \
                --request POST \
                --url "https://circleci.com/api/v2/project/gh/voiceflow/env-release-system/pipeline" \
                --header "Circle-Token: ${CIRCLECI_API_TOKEN}" \
                --header "content-type: application/json" \
                --data "{\"parameters\":{\"e2e_env_name\":\"$env_name\"}}")
              if [[ $response == "201" ]]; then
                echo "Env Release Pipeline triggered successfully. Exiting with success."
                exit 0
              else
                echo "Failed to trigger pipeline. HTTP status code: $response"
                exit 1
              fi
            fi
            // If reset DB is not enabled, then the environment will be released within this pipeline
            vfcli env resume "$env_name" --interactive false
            vfcli track attach --branch master --components all --name "$env_name" --interactive false --no-circleci
            vfcli pool free-env --env-name "$env_name"
          else
            echo "Kick-starting the deletion of the environment."
            vfcli env delete --name "<< parameters.env-name >>" --interactive false
          fi
        fi
