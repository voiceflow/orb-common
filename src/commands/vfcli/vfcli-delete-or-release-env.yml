description: Uses vfcli to delete an environment

parameters:
  env-name:
    type: string
    description: Name of the environment to create
  when:
    type: string
    description: When to run this command
    default: always
  force:
    type: boolean
    description: Whether to delete the environment forcefully
    default: false
  env-name-path:
    type: string
    description: Path to the env_name file
    default: "/home/circleci/voiceflow/env_name.txt"
  reset-db:
    type: boolean
    description: Whether to reset the database
    default: false
steps:
  - restore_cache:
      key: env_name_cache-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_WORKFLOW_ID }}
  - run:
      name: Release or Delete Env
      when: << parameters.when >>
      command: |
        force="<< parameters.force >>"
        if [[ $force == true ]]; then
          vfcli env delete --name "<< parameters.env-name >>" --interactive false
        else
          if [[ -f << parameters.env-name-path >> ]]; then
            env_name=$(cat << parameters.env-name-path >>)
            echo "Env: $env_name will be released"
          else
            env_name="null"
            echo "Env name file was not found. Will proceed to deleting the environment."
          fi
          if [[ "$env_name" != "null" ]] && [[ -n "$env_name" ]]; then
            echo "Releasing the environment..... $env_name"
            vfcli pool release-env --env-name "$env_name"
            if [[ << parameters.reset-db >> == true ]]; then
              echo "Resetting the database for $env_name"
              echo "Triggering pipeline with env-name parameter"
              response=$(curl -s -w "\n%{http_code}" \
                --request POST \
                --url "https://circleci.com/api/v2/project/gh/voiceflow/env-release-system/pipeline" \
                --header "Circle-Token: ${CIRCLECI_API_TOKEN}" \
                --header "content-type: application/json" \
                --data "{\"parameters\":{\"e2e_env_name\":\"$env_name\",\"trigger_pipeline\":true}}")
              http_status=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | sed '$d')
              if [[ $http_status == "201" || $http_status == "200" ]]; then
                if echo "$response_body" | jq empty 2>/dev/null; then
                  pipeline_id=$(echo "$response_body" | jq -r '.id // empty')
                  pipeline_number=$(echo "$response_body" | jq -r '.number // empty')
                  if [[ -n $pipeline_number ]]; then
                    pipeline_url="https://app.circleci.com/pipelines/github/voiceflow/env-release-system/$pipeline_number"
                    echo "Env Release Pipeline triggered successfully."
                    echo "Pipeline URL: $pipeline_url"
                    echo "Pipeline ID: $pipeline_id"
                    echo "Exiting with success."
                    exit 0
                  else
                    echo "Failed to retrieve pipeline number. Response body: $response_body"
                  fi
                else
                  echo "Response is not valid JSON. Response body: $response_body"
                fi
              else
                echo "Failed to trigger pipeline. HTTP status code: $http_status"
                echo "Response body: $response_body"
              fi
            fi
            vfcli env resume "$env_name" --interactive false
            vfcli track attach --branch master --components all --name "$env_name" --interactive false --no-circleci
            vfcli pool free-env --env-name "$env_name"
          else
            echo "Kick-starting the deletion of the environment."
            if ! vfcli env delete --name "<< parameters.env-name >>" --interactive false; then
              echo "Standard deletion failed. Attempting deep clean..."
              if ! vfcli env delete --name "<< parameters.env-name >>" --deep-clean; then
                echo "Deep clean deletion also failed. Exiting with error."
                exit 1
              else
                echo "Deep clean deletion successful."
              fi
            else
              echo "Standard deletion successful."
            fi
          fi
        fi

