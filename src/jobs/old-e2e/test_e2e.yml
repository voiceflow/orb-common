machine:
  image: "ubuntu-2004:202107-02"
  docker_layer_caching: true
resource_class: xlarge
parallelism: 4
parameters:
  github_username:
    description: username for cloning git repositories
    type: env_var_name
  github_token:
    description: token for cloning git repositories
    type: env_var_name
  infrastructure_e2e_commit:
    description: git commit hash for infrastructure-e2e
    type: string
    default: ""
  database_cli_commit:
    description: git commit hash for database-cli
    type: string
    default: master
  creator_app_commit:
    description: git commit hash for creator-app
    type: string
    default: << pipeline.git.revision >>
  vf_service_commit:
    description: git commit hash for vf-service
    type: string
    default: << pipeline.git.revision >>
  vf_service_port:
    description: port of the service to expose
    type: string
    default: ""
  vf_service_name:
    description: Setup a specific service
    type: string
    default: ""
  vf_monorepo_services:
    description: Monorepo services to start for e2e tests
    type: string
    default: ""
  vf_service_install_args:
    description: Extra args while installing the service
    type: string
    default: ""
  vf_service_endpoint_to_wait:
    description: Custom endpoint to wait
    type: string
    default: ""
  vf_service_profile:
    description: Profile of services to run with docker-compose
    type: string
    default: core
  enable:
    description: Enable or not the e2e
    type: boolean
    default: true
  force_execute:
    description: Force execute of the e2e
    type: boolean
    default: false
  skip_on_draft:
    description: Skip running e2e for draft PRs
    type: boolean
    default: false
steps:
  - when:
      condition: "<< parameters.skip_on_draft >>"
      steps:
        - skip_while_draft
  - run:
      name: Check if test have to be executed
      command: |-
        ENABLE=<< parameters.enable >>
        FORCE_EXECUTE=<< parameters.force_execute >>

        if [[ $FORCE_EXECUTE == true ]]; then
          exit 0
        fi

        if [[ $CIRCLE_BRANCH == "master" || $CIRCLE_BRANCH == "production" ]]; then
          exit 0
        fi

        if [[ $ENABLE == false ]]; then
          circleci-agent step halt
        fi
  - clone_repo:
      step_name: Downloading e2e stack
      github_username: "<< parameters.github_username >>"
      github_token: "<< parameters.github_token >>"
      github_repo_name: infrastructure-e2e
      github_commit: "<< parameters.infrastructure_e2e_commit >>"
      path_to_clone: ~/code/infrastructure-e2e
  - init_e2e_machine:
      github_username: "<< parameters.github_username >>"
      github_token: "<< parameters.github_token >>"
      database_cli_commit: "<< parameters.database_cli_commit >>"
  - setup_vf_creator_app_machine:
      github_username: "<< parameters.github_username >>"
      github_token: "<< parameters.github_token >>"
      creator_app_commit: "<< parameters.creator_app_commit >>"
      build_dependencies_command: "yarn build:deps <<# parameters.vf_monorepo_services >>&& yarn build:services<</ parameters.vf_monorepo_services >>"
  - run:
      name: Wait until tools are ready
      no_output_timeout: 10m
      command: |-
        until [ -f /tmp/creator_app_finished.txt ]
        do
            sleep 1
        done
        echo "Creator App ready"

        until [ -f /tmp/dbcli_finished.txt ]
        do
            sleep 1
        done
        echo "DBCLI ready"

        until [ -f /tmp/executor_finished.txt ]
        do
            sleep 1
        done
        echo "Executor ready"
  - vf_save_cache:
      working_directory: ~/code/database-cli
      cache_prefix: e2e-machine
  - vf_save_cache:
      working_directory: ~/code/creator-app
      cache_prefix: e2e-machine
  - docker_login
  - run_command_with_retry:
      step_name: Download Docker image
      command: "docker pull 168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1"
  - run:
      name: Setup databases
      working_directory: ~/code/infrastructure-e2e
      command: |-
        docker rm code \
          || docker create \
            --network="vf_voiceflow" \
            --volume /code \
            --name code \
            168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
            /bin/true
        docker-compose -p vf -f docker-compose-db.yaml up -d
  - run_command_with_retry:
      step_name: Setup Database
      working_directory: ~/code
      background: true
      command: |-
        # copy a config file into this volume
        docker cp database-cli code:/code
        # start an application container using this volume
        docker run \
          --workdir /code/database-cli \
          --name dbcli-e2e \
          --hostname dbcli.test.e2e \
          --network="vf_voiceflow" \
          --env AWS_ACCESS_KEY_ID="null" \
          --env AWS_SECRET_ACCESS_KEY="null" \
          --volumes-from code \
          168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
          /bin/bash -c "yarn init:e2e"
  - run:
      name: Copy e2e
      working_directory: ~/code
      command: |-
        # copy a config file into this volume
        echo "copy code"
        docker cp creator-app code:/code/creator-app
  - run_command_with_retry:
      step_name: Download Docker images
      working_directory: ~/code/infrastructure-e2e
      command: docker-compose --profile << parameters.vf_service_profile >> -p vf -f docker-compose-vf.yaml pull
  - run:
      name: Setup Voiceflow services
      working_directory: ~/code/infrastructure-e2e
      command: |-
        #sudo systemctl restart docker
        export DOCKER_CLIENT_TIMEOUT=120
        export COMPOSE_HTTP_TIMEOUT=120
        docker-compose --profile << parameters.vf_service_profile >> -p vf -f docker-compose-vf.yaml up -d
  - when:
      condition: "<< parameters.vf_monorepo_services >>"
      steps:
        - setup_local_registry:
            verdaccio_config: ~/code/creator-app/config/verdaccio/config.yaml
        - monorepo_publish_to_local_registry:
            working_directory: ~/code/creator-app
        - run:
            name: Run monorepo services
            background: true
            working_directory: ~/code/creator-app
            command: |-
              echo "running monorepo e2e services"
              npx lerna@4.0.0 exec --parallel --scope '<< parameters.vf_monorepo_services >>' -- yarn --ignore-engines e2e:ci
  - run:
      name: Run creator e2e
      working_directory: ~/code/creator-app
      command: |-
        echo "running e2e"
        docker run \
          --detach \
          --expose 3002 \
          --publish 3002:3002 \
          --workdir /code/creator-app \
          --network="vf_voiceflow" \
          --name creator-app-e2e \
          --hostname creator-app.test.e2e \
          --volumes-from code \
          --volume vf_certs:/code/creator-app/packages/creator-app/certs \
          --volume vf_caroot:/usr/local/share/ca-certificates \
          168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
          /bin/bash -c "update-ca-certificates && yarn start:e2e && sleep infinity"
  - check_e2e_deps:
      step_name: Waiting everything is ready
      working_directory: ~/code/creator-app/packages/creator-app
  - when:
      condition: "<< parameters.vf_service_name >>"
      steps:
        - setup_vf_service_machine:
            github_username: "<< parameters.github_username >>"
            github_token: "<< parameters.github_token >>"
            vf_service_name: "<< parameters.vf_service_name >>"
            vf_service_commit: "<< parameters.vf_service_commit >>"
            vf_service_port: "<< parameters.vf_service_port >>"
            vf_service_install_args: "<< parameters.vf_service_install_args >>"
            vf_service_endpoint_to_wait: "<< parameters.vf_service_endpoint_to_wait >>"
  - run:
      name: Run Cypress Tests
      working_directory: ~/code/creator-app/packages/creator-app
      command: |-
        docker run \
          --workdir /code/creator-app \
          --network="vf_voiceflow" \
          --name cypress-e2e \
          --volumes-from code \
          --volume vf_certs:/code/creator-app/packages/creator-app/certs \
          --volume vf_caroot:/usr/local/share/ca-certificates \
          --volume /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket \
          --env NODE_OPTIONS=--max_old_space_size=4096 \
          --env CYPRESS_API_URL="$CYPRESS_API_URL" \
          --env CIRCLE_WORKFLOW_ID="$CIRCLE_WORKFLOW_ID" \
          --env CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY" \
          168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
          /bin/bash -c "yarn cypress:install && yarn cypress:ci"
  - extract_cypress_artifacts
  - extract_e2e_logs
  - run:
      name: Stop ephemeral docker images
      command: |-
        set +e
        docker rm $(docker ps -q -a --filter name=verdaccio-conf)
        docker kill $(docker ps -q -a --filter name=verdaccio)
        docker rm $(docker ps -q -a --filter name=verdaccio)
        docker rm $(docker ps -q -a --filter name=code)
        docker rm $(docker ps -q -a --filter name=cypress-e2e)
        docker kill $(docker ps -q -a --filter name=creator-app-e2e)
        docker rm $(docker ps -q -a --filter name=creator-app-e2e)
        docker rm $(docker ps -q -a --filter name=dbcli-e2e)
        set -e
  - docker_prune:
      when: always
      clean_images: true
      clean_volumes: true
  - store_artifacts:
      path: ~/code/creator-app/packages/creator-app/cypress/videos
  - store_artifacts:
      path: ~/code/creator-app/packages/creator-app/cypress/screenshots
  - store_artifacts:
      path: ~/logs
