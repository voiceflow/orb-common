machine:
  image: "ubuntu-2004:202107-02"
  docker_layer_caching: true
resource_class: xlarge
parallelism: 4
parameters:
  github_username:
    description: username for cloning git repositories
    type: env_var_name
  github_token:
    description: token for cloning git repositories
    type: env_var_name
  infrastructure_e2e_commit:
    description: git commit hash for infrastructure-e2e
    type: env_var_name
    default: DEFAULT_COMMIT
  database_cli_commit:
    description: git commit hash for database-cli
    type: env_var_name
    default: DEFAULT_COMMIT
  creator_app_commit:
    description: git commit hash for creator-app
    type: env_var_name
    default: CIRCLE_SHA1
  vf_service_commit:
    description: git commit hash for vf-service
    type: env_var_name
    default: DEFAULT_COMMIT
  vf_service_port:
    description: port of the service to expose
    type: string
    default: ""
  vf_service_name:
    description: Setup a specific service
    type: string
    default: ""
  vf_monorepo_services:
    description: Monorepo services to start for e2e tests
    type: string
    default: ""
  vf_service_install_args:
    description: Extra args while installing the service
    type: string
    default: ""
  vf_service_endpoint_to_wait:
    description: Custom endpoint to wait
    type: string
    default: ""
  vf_service_profile:
    description: Profile of services to run with docker-compose
    type: string
    default: core
  enable:
    description: Enable or not the e2e
    type: boolean
    default: true
  force_execute:
    description: Force execute of the e2e
    type: boolean
    default: false
  skip_on_draft:
    description: Skip running e2e for draft PRs
    type: boolean
    default: false
steps:
  - when:
      condition: "<< parameters.skip_on_draft >>"
      steps:
        - skip_while_draft
  - run:
      name: Check if test have to be executed
      environment:
        ENABLE: << parameters.enable >>
        FORCE_EXECUTE: << parameters.force_execute >>
      command: <<include(scripts/e2e/is-execution-required.sh)>>
  - clone_repo:
      step_name: Downloading e2e stack
      github_username: "<< parameters.github_username >>"
      github_token: "<< parameters.github_token >>"
      github_repo_name: infrastructure-e2e
      github_commit: "<< parameters.infrastructure_e2e_commit >>"
      path_to_clone: ~/code/infrastructure-e2e
  - init_e2e_machine:
      github_username: "<< parameters.github_username >>"
      github_token: "<< parameters.github_token >>"
      database_cli_commit: "<< parameters.database_cli_commit >>"
  - setup_vf_creator_app_machine:
      github_username: "<< parameters.github_username >>"
      github_token: "<< parameters.github_token >>"
      creator_app_commit: "<< parameters.creator_app_commit >>"
      build_dependencies_command: "yarn build:deps <<# parameters.vf_monorepo_services >>&& yarn build:services<</ parameters.vf_monorepo_services >>"
  - run:
      name: Wait until tools are ready
      no_output_timeout: 10m
      command: <<include(scripts/e2e/wait-for-tools.sh)>>
  - vf_save_cache:
      working_directory: ~/code/database-cli
      cache_prefix: e2e-machine
  - vf_save_cache:
      working_directory: ~/code/creator-app
      cache_prefix: e2e-machine
  - docker_login
  - run_command_with_retry:
      step_name: Download Docker image
      command: docker pull 168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1
  - run:
      name: Setup database containers
      working_directory: ~/code/infrastructure-e2e
      command: <<include(scripts/e2e/setup-database-containers.sh)>>
  - run_command_with_retry:
      step_name: Setup Databases
      working_directory: ~/code
      background: true
      command: <<include(scripts/e2e/setup-database.sh)>>
  - run:
      name: Copy e2e
      working_directory: ~/code
      command: docker cp creator-app code:/code/creator-app
  - run_command_with_retry:
      step_name: Download Docker images
      working_directory: ~/code/infrastructure-e2e
      command: docker-compose --profile << parameters.vf_service_profile >> -p vf -f docker-compose-vf.yaml pull
  - run:
      name: Setup Voiceflow services
      working_directory: ~/code/infrastructure-e2e
      environment:
        DOCKER_CLIENT_TIMEOUT: 120
        COMPOSE_HTTP_TIMEOUT: 120
      command: docker-compose --profile << parameters.vf_service_profile >> -p vf -f docker-compose-vf.yaml up -d
  - when:
      condition: "<< parameters.vf_monorepo_services >>"
      steps:
        - setup_local_registry:
            verdaccio_config: ~/code/creator-app/config/verdaccio/config.yaml
        - monorepo_publish_to_local_registry:
            working_directory: ~/code/creator-app
        - run:
            name: Run monorepo services
            background: true
            working_directory: ~/code/creator-app
            command: npx lerna@4.0.0 exec --parallel --scope '<< parameters.vf_monorepo_services >>' -- yarn --ignore-engines e2e:ci
  - run:
      name: Run creator e2e
      working_directory: ~/code/creator-app
      command: <<include(scripts/e2e/run.sh)>>
  - check_e2e_deps:
      step_name: Waiting everything is ready
      working_directory: ~/code/creator-app/packages/creator-app
  - when:
      condition: "<< parameters.vf_service_name >>"
      steps:
        - setup_vf_service_machine:
            github_username: "<< parameters.github_username >>"
            github_token: "<< parameters.github_token >>"
            vf_service_name: "<< parameters.vf_service_name >>"
            vf_service_commit: "<< parameters.vf_service_commit >>"
            vf_service_port: "<< parameters.vf_service_port >>"
            vf_service_install_args: "<< parameters.vf_service_install_args >>"
            vf_service_endpoint_to_wait: "<< parameters.vf_service_endpoint_to_wait >>"
  - run:
      name: Run Cypress Tests
      working_directory: ~/code/creator-app/packages/creator-app
      command: <<include(scripts/e2e/run-cypress.sh)>>
  - extract_cypress_artifacts
  - extract_e2e_logs
  - store_artifacts:
      path: ~/code/creator-app/packages/creator-app/cypress/videos
  - store_artifacts:
      path: ~/code/creator-app/packages/creator-app/cypress/screenshots
  - store_artifacts:
      path: ~/logs
