description: Waiter job to be used as a dependency for the Release and Delete job
docker:
  - image: circleci/node
parameters:
  wait-duration:
    type: integer
    description: Waiter Sleep time
    default: 15
steps:
  - run:
      name: Check if all jobs have completed
      command: |
        ## Function to check if the API request was successful and process the response
        check_jobs() {
          date -u
          echo "Fetching jobs from CircleCI API..."
          response=$(curl "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" \
            --silent \
            --location \
            --request GET \
            --header "Circle-Token: $CIRCLECI_API_TOKEN")

          if [[ $? -ne 0 ]]; then
            echo "Error: Failed to fetch jobs from CircleCI API"
            return 1
          fi

          echo "API response received" >&2
          echo "$response" >responses.log

          if ! jq -e . >/dev/null 2>&1 \<<<"$response" ; then
            echo "Error: Malformed JSON response"
            cat responses.log
            return 1
          fi

          STATUS_FILTER=$(cat \<<EOF
          .items
            | sort_by(.status, .started_at, .name)[]
            | select(.name != "vfcommon/waiter")
            | { status, started_at, name }
        EOF
          )

          statuses=$(jq -cr "$STATUS_FILTER" \<<<"$response" )
          if [[ -z "$statuses" ]]; then
            echo "No job statuses found or unexpected response format"
            return 1
          fi

          echo "Job statuses extracted:"
          echo "$statuses"

          ## Check if any job is still running
          ## We likely need to consider blocked too
          if grep -q "running" \<<<"$statuses" ; then
            echo "There are still running jobs."
            # jobs are still running
            return 0
          else
            echo "No jobs are running."
            # all jobs are completed successfully
            return 2
          fi
        }

        ## The waiter job keeps looping through to check if all running jobs have been completed
        while true; do
          echo "Running check_jobs function..."

          set +e
          check_jobs
          status=$?
          set -e

          echo "Status returned from check_jobs: $status"
          if [[ $status -eq 1 ]]; then
            echo "Retrying in << parameters.wait-duration >> seconds due to error..."
          elif [[ $status -eq 2 ]]; then
            echo "All jobs completed successfully."
            exit 0 # success
          else
            echo "Jobs are still running, checking again in << parameters.wait-duration >> seconds..."
          fi
          sleep << parameters.wait-duration >>
        done

  - run: echo "All required jobs have now completed"
