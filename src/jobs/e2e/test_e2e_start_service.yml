executor: node-executor
parameters:
  service_name:
    description: name of the service under test
    type: string
  service_port:
    description: port of the service under test
    type: string
  e2e_service_dependencies:
    description: space-delimited list of services which must be started first
    type: string
    default: ""
working_directory: ~/code/<< parameters.service_name >>
steps:
  - setup_remote_docker:
      version: 20.10.11
  - docker_login
  - run_command_with_retry:
      step_name: Download E2E Docker image
      command: "docker pull 168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1"
  - init_e2e_docker:
      checkout: true
      setup_db: false
      github_username: GITHUB_USERNAME
      github_token: GITHUB_TOKEN
      cache_prefix: services-e2e
  - clone_repo:
      step_name: Downloading e2e stack
      github_username: GITHUB_USERNAME
      github_token: GITHUB_TOKEN
      github_repo_name: infrastructure-e2e
      path_to_clone: ~/code/infrastructure-e2e
  - setup_vf_dbs_docker:
      working_directory: ~/code/database-cli
      github_username: GITHUB_USERNAME
      github_token: GITHUB_TOKEN
      cache_prefix: services-e2e
      initialize_database: false
  - run:
      name: Download E2E dependencies
      working_directory: ~/code/infrastructure-e2e
      environment:
        E2E_SERVICE_DEPENDENCIES: << parameters.e2e_service_dependencies >>
      command: <<include(scripts/e2e/download-dependencies.sh)>>
  - run:
      name: Start Databases
      working_directory: ~/code/infrastructure-e2e
      command: docker-compose -p vf -f docker-compose-db.yaml up -d
  - run_command_with_retry:
      step_name: Setup Database
      working_directory: ~/code
      background: true
      command: <<include(scripts/e2e/setup-database.sh)>>
  - when:
      condition: "<< parameters.e2e_service_dependencies >>"
      steps:
        - run:
            name: Start E2E dependencies
            working_directory: ~/code/infrastructure-e2e
            command: |-
                docker wait cert-generator
                docker-compose -p vf -f docker-compose-vf.yaml up -d << parameters.e2e_service_dependencies >>
  - run:
      name: Start service under test
      environment:
        SERVICE_NAME: << parameters.service_name >>
        SERVICE_PORT: << parameters.service_port >>
      command: <<include(scripts/e2e/start-service.sh)>>
  - run:
      name: Wait for service to be available
      environment:
        SERVICE_NAME: << parameters.service_name >>
        SERVICE_PORT: << parameters.service_port >>
      command: <<include(scripts/e2e/wait-for-service.sh)>>
  - extract_e2e_logs
  - store_artifacts:
      path: ~/logs
