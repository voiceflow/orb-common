executor: node-executor
parameters:
  service_name:
    description: name of the service under test
    type: string
  service_port:
    description: port of the service under test
    type: string
  e2e_service_dependencies:
    description: space-delimited list of services which must be started first
    type: string
    default: ""
working_directory: ~/code/<< parameters.service_name >>
steps:
  - setup_remote_docker:
      version: 20.10.11
  - docker_login
  - run_command_with_retry:
      step_name: Download E2E Docker image
      command: "docker pull 168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1"
  - init_e2e_docker:
      checkout: true
      setup_db: false
      github_username: GITHUB_USERNAME
      github_token: GITHUB_TOKEN
      cache_prefix: services-e2e
  - clone_repo:
      step_name: Downloading e2e stack
      github_username: GITHUB_USERNAME
      github_token: GITHUB_TOKEN
      github_repo_name: infrastructure-e2e
      path_to_clone: ~/code/infrastructure-e2e
  - setup_vf_dbs_docker:
      working_directory: ~/code/database-cli
      github_username: GITHUB_USERNAME
      github_token: GITHUB_TOKEN
      cache_prefix: services-e2e
      initialize_database: false
  - run:
      name: Download E2E dependencies
      working_directory: ~/code/infrastructure-e2e
      command: |-
        docker create \
          --network=\"vf_voiceflow\" \
          --volume /code \
          --name code \
          168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
          /bin/true

        docker-compose -p vf -f docker-compose-db.yaml pull << parameters.e2e_service_dependencies >>
        docker-compose -p vf -f docker-compose-vf.yaml pull << parameters.e2e_service_dependencies >>
  - run:
      name: Start Databases
      working_directory: ~/code/infrastructure-e2e
      command: docker-compose -p vf -f docker-compose-db.yaml up -d
  - run_command_with_retry:
      step_name: Setup Database
      working_directory: ~/code
      background: true
      command: |-
        # copy a config file into this volume
        docker cp database-cli code:/code
        # start an application container using this volume
        docker run \
          --workdir /code/database-cli \
          --name dbcli-e2e \
          --hostname dbcli.test.e2e \
          --network=\"vf_voiceflow\" \
          --env AWS_ACCESS_KEY_ID=\"null\" \
          --env AWS_SECRET_ACCESS_KEY=\"null\" \
          --volumes-from code \
          168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
          /bin/bash -c \"yarn init:e2e\"
  - when:
      condition: "<< parameters.e2e_service_dependencies >>"
      steps:
        - run:
            name: Start E2E dependencies
            working_directory: ~/code/infrastructure-e2e
            command: |-
                docker wait cert-generator
                docker-compose -p vf -f docker-compose-vf.yaml up -d << parameters.e2e_service_dependencies >>
  - run:
      name: Start service under test
      command: |-
        # copy a config file into this volume and the npm token
        docker cp ~/code/<< parameters.service_name >> code:/code/<< parameters.service_name >>
        docker cp ~/.npmrc code:/code/<< parameters.service_name >>
        # start an application container using this volume
        docker run \
            --workdir /code/<< parameters.service_name >> \
            --detach \
            --expose << parameters.service_port >> \
            --publish << parameters.service_port >>:<< parameters.service_port >> \
            --name << parameters.service_name >>-e2e \
            --hostname << parameters.service_name >>.test.e2e \
            --network=\"vf_voiceflow\" \
            --volumes-from code \
            --volume vf_certs:/code/<< parameters.service_name >>/certs \
            --volume vf_caroot:/usr/local/share/ca-certificates \
            168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
            /bin/bash -c \"update-ca-certificates && yarn install --force && yarn build && yarn e2e\"
  - run:
      name: Wait for service to be available
      command: |-
        docker run \
            --network vf_voiceflow \
            168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-e2e-image:v1 \
            /bin/bash -c \"npx wait-on -t 300000 https://<< parameters.service_name >>.test.e2e:<< parameters.service_port >>/health\"
  - extract_e2e_logs
  - store_artifacts:
      path: ~/logs
