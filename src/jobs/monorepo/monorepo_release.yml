executor: << parameters.executor >>
parameters:
  install_args:
    description: Additional yarn install command options
    type: string
    default: ""
  publish_args:
    description: Additional lerna publish command options
    type: string
    default: ""
  sentry_project:
    description: Sentry project to associate the release with
    type: string
    default: ""
  avoid_post_install_scripts:
    description: Skip running post install scripts
    type: boolean
    default: true
  ssh_key:
    description: The SSH key with write permissions to the repository
    type: string
  trigger_tags_pipelines:
    description: Trigger tags after monoropo release
    type: boolean
    default: true
  release_engine:
    description: Release engine to use
    type: string
    default: "lerna"
  commit_message:
    description: Release engine to use
    type: string
    default: "chore(release): publish"
  language:
    description: language to execute
    type: string
    default: "node"
  pre_publish_steps:
    description: Steps to run before executing the publish command
    type: steps
    default: []
  post_publish_steps:
    description: Steps to run after executing the publish command
    type: steps
    default: []
  executor:
    description: The executor used to run this job
    type: executor
    default: node-executor
  prerelease:
    description: Creates a prerelease
    type: boolean
    default: false
steps:
  - add_ssh_keys:
      fingerprints:
        - "<< parameters.ssh_key >>"
  - checkout
  - install_node_modules:
      install_args: "<< parameters.install_args >>"
      avoid_post_install_scripts: "<< parameters.avoid_post_install_scripts >>"
      language: "<< parameters.language >>"
  - attach_workspace:
      at: ~/voiceflow
  - run:
      name: Set Github config
      command: |-
        git config --global user.email "serviceaccount@voiceflow.com"
        git config --global user.name "Voiceflow"

  - steps: << parameters.pre_publish_steps >>

  - when:
      condition:
        equal: ["lerna", << parameters.release_engine >>]
      steps:
        - run:
            name: Release Monorepo
            command: |-
              PRERELEASE="<< parameters.prerelease >>"
              BRANCH=$(git rev-parse --abbrev-ref HEAD)
              BRANCH_FORMATTED=$(echo $BRANCH | sed 's/[^a-zA-Z0-9.-]/-/g')
              if [ "$PRERELEASE" = "true" ]; then
                SENTRY_PROJECT=<< parameters.sentry_project >> HUSKY=0 npx lerna@4.0.0 publish prerelease \
                  --message "<< parameters.commit_message >>" --yes \
                  --no-push --no-git-tag-version --canary --preid $BRANCH_FORMATTED \
                  --conventional-commits --no-verify-access << parameters.publish_args >>
              else
                SENTRY_PROJECT=<< parameters.sentry_project >> HUSKY=0 npx lerna@4.0.0 publish \
                  --message "<< parameters.commit_message >>" --yes \
                  --conventional-commits --no-verify-access << parameters.publish_args >>
              fi
  - when:
      condition:
        equal: ["lite", << parameters.release_engine >>]
      steps:
        - run:
            name: Release Monorepo
            command: |-
              PRERELEASE="<< parameters.prerelease >>"
              BRANCH=$(git rev-parse --abbrev-ref HEAD)
              BRANCH_FORMATTED=$(echo $BRANCH | sed 's/[^a-zA-Z0-9.-]/-/g')
              if [ "$PRERELEASE" = "true" ]; then
                SENTRY_PROJECT=<< parameters.sentry_project >> HUSKY=0 npx --package @lerna-lite/cli@1.17.0 lerna publish prerelease \
                  --message "<< parameters.commit_message >>" --yes \
                  --no-push --no-git-tag-version --canary --preid $BRANCH_FORMATTED \
                  --conventional-commits --no-verify-access << parameters.publish_args >>
              else
                SENTRY_PROJECT=<< parameters.sentry_project >> HUSKY=0 npx --package @lerna-lite/cli@1.17.0 lerna publish \
                  --message "<< parameters.commit_message >>" --yes  \
                  --conventional-commits --no-verify-access << parameters.publish_args >>
              fi

  - when:
      condition:
        equal: ["nx", << parameters.release_engine >>]
      steps:
        - run:
            name: Release Monorepo
            command: yarn run publish

  - steps: << parameters.post_publish_steps >>

  - run:
      name: Store tags
      command: echo "export MONOREPO_UPDATED_TAGS=\"$(git tag --points-at HEAD)\"" >> $BASH_ENV

  - when:
      condition: "<< parameters.trigger_tags_pipelines >>"
      steps:
        - trigger_tags_pipelines:
            published_tags: MONOREPO_UPDATED_TAGS
