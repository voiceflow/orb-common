executor: smoke-executor
parallelism: << parameters.parallelism >>

parameters:
  cluster:
    type: string
    default: "cm4-vf-dev-br-2-0-p1"
  e2e-env-name:
    type: string
    default: ""
  parallelism:
    type: integer
    default: 8
  target-url:
    type: string
    default: ""
    description: "use this to override the e2e-env-name and set the full creator-app URL"
  branch-or-commit:
    type: string
    default: "master"
    description: "the branch or commit of the automated-testing repo to checkout"
  tags:
    type: string
    default: ""
  qualitywatcher:
    type: boolean
    default: false
  stable-only:
    type: boolean
    default: true

steps:
  - clone_repo:
      github_repo_name: automated-testing
      github_commit: << parameters.branch-or-commit >>
      path_to_clone: ~/project
  - install_node_modules:
      avoid_post_install_scripts: false
      cache_prefix: smoke-test
  - attach_workspace:
      at: workspace
  - install-vfcli:
      init-cluster: << parameters.cluster >>
  - run:
      name: Install stern
      command: |
        curl -sSL https://raw.githubusercontent.com/upciti/wakemeops/main/assets/install_repository | sudo bash
        sudo apt install stern
  - run:
      name: Install Kubectl
      command: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.30.1/bin/linux/amd64/kubectl && \
        chmod +x ./kubectl && \
        mv ./kubectl /usr/local/bin/kubectl
  - run:
      name: Gather Application Logs
      environment:
        ENV_NAME: << parameters.e2e-env-name >>
        LOG_DIR: &log_dir /tmp/pod-logs-<< parameters.e2e-env-name >>
      background: true
      command: |
        function capture_logs() {
            if [ -f workspace/env_name ] && [ "$(cat workspace/env_name)" != "null" ]; then
                DEV_ENV_NAME=$(cat workspace/env_name)
            else
                DEV_ENV_NAME=<< parameters.e2e-env-name >>
            fi
            # Read components into an array directly from the command output
            components=($(vfcli component list -n "${DEV_ENV_NAME:?}" | awk 'NR>3 {print $1}'))

             echo "export DEV_ENV_NAME=$DEV_ENV_NAME >> "$BASH_ENV"
             echo "export COMPONENTS=$components >> "$BASH_ENV"

            # Iterate over the first n-1 components.Process log collection in parallel as background processes
            for ((i = 0; i < ${#components[@]} - 1; i++)); do
                component=${components[$i]}
                echo "Capturing logs for component $component"
                stern -n "${DEV_ENV_NAME:?}" -l "app.kubernetes.io/name=$component" >>"${LOG_DIR:?}/$component.log" &
            done
            # Handle the last component separately to introduce blocking.If all components' log collection is done as non blocking tasks,
            # the circleci step will terminate.So having last component as blocking ensures the collect logs step continues executing
            last_component=${components[${#components[@]}-1]}
            echo "Capturing logs for last component $last_component"
            stern -n "${DEV_ENV_NAME:?}" -l "app.kubernetes.io/name=$last_component" >>"${LOG_DIR:?}/$last_component.log"
        }
        mkdir "${LOG_DIR:?}"
        capture_logs
  - run:
      name: "Set Environment Variables"
      command: |
        # workspace/env_name is used to store the e2e env name and passed to the smoke tests
        # uses e2e-env-name if workspace/env_name is 'null'
        if [ ! -z "<< parameters.target-url >>" ]; then
          echo 'export CREATOR_APP_URL=<< parameters.target-url >>' >> $BASH_ENV
        elif [ -f workspace/env_name ] && [ "$(cat workspace/env_name)" != "null" ]; then
          echo 'export CREATOR_APP_URL=https://creator-$(cat workspace/env_name).br.development.voiceflow.com' >> $BASH_ENV
        else
          echo 'export CREATOR_APP_URL=https://creator-<< parameters.e2e-env-name >>.br.development.voiceflow.com' >> $BASH_ENV
        fi
      shell: /bin/bash
  - run:
      name: "Reference commit SHA"
      command: git rev-parse HEAD >> commit.txt
  - restore_cache:
      # use the commit of the smoke-test-runner repo as the cache key
      key: smoke-test-build-cache-{{ checksum "commit.txt" }}
  - run:
      name: Run Smoke Tests
      environment:
        CYPRESS_INCLUDE_TAGS: << parameters.tags >>
        QUALITYWATCHER_ENABLED: << parameters.qualitywatcher >>
      command: yarn test:smoke<<# parameters.stable-only >>:stable<</ parameters.stable-only >>
  - save_cache:
      key: smoke-test-build-cache-{{ checksum "commit.txt" }}
      paths:
        - node_modules/.cache/turbo
  - run:
      name: Gather Kubernetes State
      LOG_DIR: *log_dir
      command: | 
      kubectl get pods -n $DEV_ENV_NAME >> "${LOG_DIR:?}/pods-summary-state.log"
      for component in $COMPONENTS; do
        kubectl describe pod $component -n $DEV_ENV_NAME >> "${LOG_DIR:?}/$component-state.log"
      done
  - run:
      name: Remove background log collection processes
      command: | 
       killall stern  
  - store_test_results:
      path: apps/smoke-test-runner/cypress/results
  - store_artifacts:
      path: apps/smoke-test-runner/cypress/downloads
      destination: downloads
  - store_artifacts:
      path: apps/smoke-test-runner/cypress/videos
      destination: videos
  - store_artifacts:
      path: apps/smoke-test-runner/cypress/screenshots
      destination: screenshots
  - store_artifacts:
      name: Store Logs
      path: *log_dir
      destination: logs
      when: always
