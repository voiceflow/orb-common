executor: << parameters.executor >>
parameters:
  avoid_post_install_scripts:
    description: Avoid post-install scripts
    type: boolean
    default: true
  container_folder_to_copy:
    description: Avoid post-install scripts
    type: string
    default: build
  request_remote_docker:
    description: Request remote Docker
    type: boolean
    default: true
  run_in_container:
    description: Run build in remote Docker container
    type: boolean
    default: true
  monorepo_engine:
    description: Monorepo engine
    type: string
    default: "lerna"
  package:
    description: Package name
    type: string
    default: ""
  package_folder:
    description: Package folder
    type: string
    default: "packages"
  check_image:
    description: Checks if the Docker image exists
    type: boolean
    default: false
  docker_image_repo:
    description: The Docker image of the microservice
    type: string
    default: ""
  container_image_to_build:
    description: Container image to run the build
    type: string
    default: "168387678261.dkr.ecr.us-east-1.amazonaws.com/ci-node-build-image:v1"
  force_execute:
    description: '[DEPRECATED] no effect, kept for backward compatibility'
    type: boolean
    default: false
  attach_workspace:
    description: Attach workspace to the current working directory
    type: boolean
    default: false
  executor:
    description: The executor used to run this job
    type: executor
    default: node-large-executor
  paths_to_cache:
    description: Paths to cache
    type: string
    default: "{build,*.tsbuildinfo}"
  language:
    description: language to execute
    type: string
    default: "node"
  pre_build_steps:
    description: Steps to be run before executing the build commands
    type: steps
    default: []
  post_build_steps:
    description: Steps to be run after executing the build commands
    type: steps
    default: []

steps:
  - checkout
  - when:
      condition: "<< parameters.attach_workspace >>"
      steps:
        - attach_workspace:
            at: ~/voiceflow
  - when:
      condition: "<< parameters.check_image >>"
      steps:
        - when:
            condition: "<< parameters.request_remote_docker >>"
            steps:
              - check_image_exists:
                  image_repo: "<< parameters.docker_image_repo >>"
                  request_remote_docker: false
        - unless:
            condition: "<< parameters.request_remote_docker >>"
            steps:
              - check_image_exists:
                  image_repo: "<< parameters.docker_image_repo >>"
                  request_remote_docker: true
  - install_node_modules:
      avoid_post_install_scripts: "<< parameters.avoid_post_install_scripts >>"
      language: "<< parameters.language >>"

  - monorepo_restore_cache:
      package: << parameters.package >>
      package_folder: << parameters.package_folder >>
      monorepo_engine: << parameters.monorepo_engine >>

  - steps: << parameters.pre_build_steps >>

  - build:
      container_folder_to_copy: "<< parameters.container_folder_to_copy >>"
      request_remote_docker: "<< parameters.request_remote_docker >>"
      run_in_container: "<< parameters.run_in_container >>"
      container_image_to_build: "<< parameters.container_image_to_build >>"
      package_folder: "<< parameters.package_folder >>"
      package: "<< parameters.package >>"

  - steps: << parameters.post_build_steps >>

  - monorepo_save_cache:
      package: << parameters.package >>
      package_folder: << parameters.package_folder >>
      monorepo_engine: << parameters.monorepo_engine >>
      paths_to_cache: << parameters.paths_to_cache >>

  # Persist build to workspace
  - when:
      condition:
        equal:
          - python
          - "<< parameters.language >>"
      steps:
        - persist_python_build:
            package: << parameters.package >>
            package_folder: << parameters.package_folder >>
  - when:
      condition:
        equal:
          - node
          - "<< parameters.language >>"
      steps:
        - persist_node_build:
            package: << parameters.package >>
            package_folder: << parameters.package_folder >>
