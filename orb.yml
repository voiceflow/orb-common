version: 2.1
description: Voiceflow's common CI/CD orb
executors:
  # Used to run tests
  code-test-executor:
    working_directory: ~/voiceflow # directory where steps will run
    resource_class: large
    environment:
      NODE_OPTIONS: --max-old-space-size=4096
    docker: # run the steps with Docker
      - image: circleci/node:12 # Test steps container
      - image: postgres:10.6-alpine # PostgresDB service container
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust # This is needed to ensure that the PG instance can be accessed locally without explicitly creating credentials
      - image: circleci/dynamodb:13-oracle # DynamoDB service container
      - image: circleci/redis:5.0-alpine # Redis service container
      - image: circleci/mongo:4.4.1 # MongoDB service container

  # Used to run container builds
  build-executor:
    working_directory: /tmp/vf-build
    docker:
      - image: voiceflow/ci-image:v3
    resource_class: medium

  # Used to run node-intensive tests and builds
  node-executor:
    working_directory: ~/voiceflow 
    docker: 
      - image: circleci/node:12 
    environment:
      NODE_OPTIONS: --max-old-space-size=4096
    resource_class: medium+

  default-executor: # used to run the release
    docker:
      - image: circleci/node:12
    resource_class: small

#--------------------------------------------------------------------------------------------------------------------

commands:
  install_aws_cli:
    steps:
      - run:
          name: Install pip3
          command: sudo apt update && sudo apt install -y python3-pip
      - run:
          name: Install AWS CLI
          command: pip3 install awscli

  setup_pg:
    steps:
      - run:
          name: Install psql for seeding db
          command: |
            sudo apt update
            sudo apt install -y postgresql-client
      - run:
          name: Wait for Postgres & Dynamo Docker Images
          command: dockerize -wait tcp://localhost:5432 -timeout 1m 

  setup_dynamodb:
    steps:
      - run:
          name: AWS Config
          command: ./scripts/mock_aws_credentials.sh
      - run:
          name: Wait for Dynamo Docker Image
          command: dockerize -wait tcp://localhost:8000 -timeout 1m

  setup_mongodb:
    steps:
      - run:
          name: Wait for MongoDB Docker Image
          command: dockerize -wait tcp://localhost:27017 -timeout 1m

  lint_source:
    steps:
      - run:
          name: Lint source
          command: yarn lint:quiet

  lint_dockerfile:
    steps:
      - run:
          name: Lint dockerfiles
          command: |
            sudo wget -O /usr/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.3/hadolint-Linux-x86_64
            sudo chmod +x /usr/bin/hadolint
            yarn lint:dockerfiles

  authenticate_npm:
    steps:
      - run:
          name: authenticate npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

  install_node_modules:
    parameters: 
      install_args: 
        description: Additional yarn install command options
        type: string
        default: ""
    steps:
      - authenticate_npm
      - restore_cache:
          keys:
            - node-module-cache-{{ checksum "yarn.lock" }}
      - run:
          name: yarn install packages
          command: yarn install --frozen-lockfile << parameters.install_args >>
      - save_cache: # special step to save the dependency cache
          key: node-module-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

  build_push_image: 
    parameters: 
      image_repo: 
        description: The container image repository
        type: string
      release_pkg: 
        description: The npm package name to be released
        type: string
    steps:
      - checkout # special step to check out source code to working directory
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: "Build docker image"
          command: |
            IMAGE_TAG="k8s-$CIRCLE_SHA1"
            IMAGE_REPO="<< parameters.image_repo >>"
            IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
            # Fix semantic versioning 
            if [ "$CIRCLE_BRANCH" == "master" ]; then
              npm config set unsafe-perm true # needed for npx to work
              set +e  # Don't exit on the any error (for semantic-release)
              npx semantic-release@15 --prepare --dry-run | tee sem_release.output  # print semver to screen and force return 0
              SEM_VER=$(cat sem_release.output | grep 'Published release ' | awk '{print $NF}')  # Get release semver
              set -e  # Don't exit on the any error (for semantic-release)
              if [ -z "$SEM_VER" ]; then
                echo -e "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                SEM_VER=$(npm view << parameters.release_pkg >> version)
              fi
            else
              SEM_VER=$CIRCLE_BRANCH-$CIRCLE_SHA1
            fi
            echo -e "Building with SEM_VER=$SEM_VER"
            $(aws ecr get-login --no-include-email --region us-east-1)
            docker build \
              --build-arg NPM_TOKEN=//registry.npmjs.org/:_authToken=${NPM_TOKEN} \
              --build-arg build_BUILD_NUM=${CIRCLE_BUILD_NUM} \
              --build-arg build_BUILD_URL=${CIRCLE_BUILD_URL}	\
              --build-arg build_GIT_SHA=${CIRCLE_SHA1} \
              --build-arg build_SEM_VER=${SEM_VER} \
              -t $IMAGE_NAME .
      - run:
          name: "Push docker images"
          command: |
            IMAGE_TAG="k8s-$CIRCLE_SHA1"
            IMAGE_REPO="<< parameters.image_repo >>"
            IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
            docker push $IMAGE_NAME
            BRANCH_NAME=$CIRCLE_BRANCH
            if [[ -z "$CIRCLE_BRANCH" && ! -z "$CIRCLE_TAG" ]]; then
              BRANCH_NAME="master"
            fi
            docker tag $IMAGE_NAME $IMAGE_REPO:latest-$BRANCH_NAME
            docker push $IMAGE_REPO:latest-$BRANCH_NAME

  deploy_image: 
    description: Deploy an image into a K8s cluster
    parameters: 
      image_repo: 
        description: The container image repository
        type: string
      target: 
        description: The target deployment/daemonset/statefulset prefix to modify
        type: string
        default: deployment/some-repo
      namespace:
        description: The namespace the target resides in 
        type: string
      tagged: 
        description: Running on a git tag?
        type: boolean
        default: false
    steps:
      - run:
          name: Update kubernetes image
          command: |
            IMAGE_TAG="k8s-$CIRCLE_SHA1"
            IMAGE_REPO="<< parameters.image_repo >>"
            IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
            if [[ "<< parameters.tagged >>" != "false" ]]; then
              aws eks --region us-east-1 update-kubeconfig --name development
              kubectl set image --namespace << parameters.namespace >> << parameters.target >>-master app=$IMAGE_NAME
              aws eks --region us-east-1 update-kubeconfig --name production
              kubectl set image --namespace << parameters.namespace >> << parameters.target >>-production app=$IMAGE_NAME
            else
              aws eks --region us-east-1 update-kubeconfig --name development
              kubectl set image --namespace << parameters.namespace >> << parameters.target >>-$CIRCLE_BRANCH app=$IMAGE_NAME
              if [ "$CIRCLE_BRANCH" == "master" ]; then
                aws eks --region us-east-1 update-kubeconfig --name production
                kubectl set image --namespace << parameters.namespace >> << parameters.target >>-production app=$IMAGE_NAME
              fi
            fi

  build_deploy_dev_env:
    description: Deploy an image into a K8s cluster
    parameters: 
      image_repo: 
        description: The container image repository
        type: string
      ssh_key: 
        description: The SSH key with write permissions to the repository
        type: string
      component: 
        description: The component type for development environment deployment
        type: string
    steps:
      - checkout # special step to check out source code to working directory
      - setup_remote_docker:  # Need this to run DinD
          version: 19.03.13
      - attach_workspace:
          at: /tmp/vf-build
      - add_ssh_keys: # To enable write access to repository for removing development environment branches
          fingerprints:
            - << parameters.ssh_key >>
      - run:
          name: "Build dev environment image"
          command: |
            IMAGE_TAG="k8s-$CIRCLE_SHA1"
            IMAGE_REPO="<< parameters.image_repo >>"
            IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
            SEM_VER="$CIRCLE_BRANCH-$CIRCLE_SHA1"
            $(aws ecr get-login --no-include-email --region us-east-1)
            set +e
            DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $IMAGE_NAME > /dev/null 2>&1
            SEARCH_IMAGE_RESULT=$?
            set -e
            if [[ $SEARCH_IMAGE_RESULT -ne 0 ]]; then   # Only build the image if there are no existing images 
              docker build \
                --build-arg NPM_TOKEN=//registry.npmjs.org/:_authToken=${NPM_TOKEN} \
                --build-arg build_BUILD_NUM=${CIRCLE_BUILD_NUM} \
                --build-arg build_BUILD_URL=${CIRCLE_BUILD_URL}	\
                --build-arg build_GIT_SHA=${CIRCLE_SHA1} \
                --build-arg build_SEM_VER=${SEM_VER} \
                -t $IMAGE_NAME . 
              docker push $IMAGE_NAME
            fi
            git push origin --delete $CIRCLE_BRANCH --no-verify # Clean up git branch
      - run:
          name: Install latest envcli utility
          command: |
            API_URL="https://$GITHUB_TOKEN:@api.github.com/repos/voiceflow/envcli"
            ASSET_ID=$(curl $API_URL/releases/latest | jq -r '.assets[2].id')
            curl -J -L -H "Accept: application/octet-stream" "$API_URL/releases/assets/$ASSET_ID" --output envcli.tar.gz
            tar -xf envcli.tar.gz
      - run:
          name: "Deploy dev environment image"
          command: |
            IMAGE_TAG="k8s-$CIRCLE_SHA1"
            IMAGE_REPO="<< parameters.image_repo >>"
            IMAGE_NAME="$IMAGE_REPO:$IMAGE_TAG"
            ENV_NAME="${CIRCLE_BRANCH%%_*}"
            aws eks --region us-east-1 update-kubeconfig --name development
            NON_INTERACTIVE=true ./envcli edit component << parameters.component >> << parameters.component >> -n $ENV_NAME -i $IMAGE_NAME

#--------------------------------------------------------------------------------------------------------------------

jobs: 
  release:
    executor: default-executor
    parameters: 
      install_args: 
        description: Additional yarn install command options
        type: string
        default: ""
    steps:
      - checkout
      - install_node_modules:
          install_args: "<< parameters.install_args >>"
      - run: npx semantic-release@15

  test_e2e:
    resource_class: large
    docker: # run the steps with Docker
      - image: cypress/base:12 # Test steps container
        environment:
          DOCKER_COMPOSE_VERSION: '1.24.1'
          DOCKERIZE_VERSION: v0.6.1
          MKCERT_VERSION: v1.4.0
          NODE_OPTIONS: --max_old_space_size=8192
      - image: postgres:10-alpine # PostgresDB service container
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: circleci/dynamodb:13-oracle # DynamoDB service container
      - image: circleci/mongo:4.2-bionic # MongoDB service container
      - image: redis:5-alpine # Redis service container
    parameters:
      github_username:
        description: username for cloning git repositories
        type: string
      github_token:
        description: token for cloning git repositories
        type: string
      creator_api_commit:
        description: git commit hash for creator-api
        type: string
        default: master
      creator_app_commit:
        description: git commit hash for creator-app
        type: string
        default: master
      database_cli_commit:
        description: git commit hash for database-cli
        type: string
        default: master
      server_data_api_commit:
        description: git commit hash for server-data-api
        type: string
        default: master
      alexa_service_commit:
        description: git commit hash for alexa-service
        type: string
        default: master
    steps:
      - authenticate_npm
      - run:
          name: Setup environment
          command: |
            apt update
            apt install -y nginx postgresql-client wget libnss3-tools apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
            apt update
            apt install docker-ce-cli

            wget https://github.com/FiloSottile/mkcert/releases/download/$MKCERT_VERSION/mkcert-$MKCERT_VERSION-linux-amd64
            chmod +x mkcert-$MKCERT_VERSION-linux-amd64
            mv mkcert-$MKCERT_VERSION-linux-amd64 /usr/local/bin/mkcert
            mkcert -install

            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz

            curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      - run:
          name: Clone Database
          command: |
            git clone https://<< parameters.github_username >>:<< parameters.github_token >>@github.com/voiceflow/database-cli ~/database-cli
            git reset --hard << parameters.database_cli_commit >>
      - run:
          name: Clone Server Data API
          command: |
            git clone https://<< parameters.github_username >>:<< parameters.github_token >>@github.com/voiceflow/server-data-api ~/server-data-api
            git reset --hard << parameters.server_data_api_commit >>
      - run:
          name: Clone Alexa Service
          command: |
            git clone https://<< parameters.github_username >>:<< parameters.github_token >>@github.com/voiceflow/alexa-service ~/alexa-service
            git reset --hard << parameters.alexa_service_commit >>
      - run:
          name: Clone Creator API
          command: |
            git clone https://<< parameters.github_username >>:<< parameters.github_token >>@github.com/voiceflow/creator-api ~/creator-api
            git reset --hard << parameters.creator_api_commit >>
      - run:
          name: Clone Creator App
          command: |
            git clone https://<< parameters.github_username >>:<< parameters.github_token >>@github.com/voiceflow/creator-app ~/creator-app
            git reset --hard << parameters.creator_app_commit >>
      - run:
          name: Setup Database
          working_directory: ~/database-cli
          command: |
            yarn install --frozen-lockfile --ignore-engines
            yarn init:e2e
      - run:
          name: Setup Server Data API
          working_directory: ~/server-data-api
          command: |
            yarn install --frozen-lockfile
            yarn gen-certs:e2e
      - run:
          name: Setup Creator API
          working_directory: ~/creator-api
          command: |
            yarn install --frozen-lockfile
            yarn gen-certs:e2e
      - run:
          name: Setup Alexa Service
          working_directory: ~/alexa-service
          command: |
            yarn install --frozen-lockfile
            yarn gen-certs:e2e
      - run:
          name: Setup Creator App
          working_directory: ~/creator-app
          no_output_timeout: 15m
          command: |
            echo 'VF_APP_API_HOST=localhost' >> .env.local
            echo 'VF_APP_FF_DATA_REFACTOR=true' >> .env.local
            yarn install --frozen-lockfile
            yarn build:e2e
            yarn gen-certs:e2e
            cp -R build/. /var/www
            cp -R certs/. /etc/nginx/ssl
            cp config/nginx.e2e.conf /etc/nginx/conf.d/default.conf
            nginx
      - run:
          name: Wait for Postgres & Dynamo Docker Images
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m \
            && dockerize -wait tcp://localhost:8000 -timeout 1m
      - run:
          name: Start Server Data API
          background: true
          working_directory: ~/server-data-api
          command: yarn e2e
      - run:
          name: Start Creator API
          background: true
          working_directory: ~/creator-api
          command: yarn e2e
      - run:
          name: Start Alexa Service
          background: true
          working_directory: ~/alexa-service
          command: yarn e2e
      - run:
          name: Wait for Services
          command: |
            dockerize -wait tcp://localhost:8080 -timeout 1m \
            && dockerize -wait tcp://localhost:8200 -timeout 1m \
            && dockerize -wait tcp://localhost:6969 -timeout 1m
      - run:
          name: Run Cypress Tests
          working_directory: ~/creator-app
          command: yarn cypress:ci
      # - codecov/upload:
      #     file: nyc_coverage/lcov.info
      #     flags: e2e
      - store_artifacts:
          path: ~/creator-app/cypress/videos
      - store_artifacts:
          path: ~/creator-app/cypress/screenshots